# Definindo o nome do workflow
name: Test and Deploy Workflow

# Definindo quando o workflow será disparado
on:
  push:
    branches: [ main ]

# Definindo os jobs que o workflow executará
jobs:
  test_jobs:
    name: Executando job de teste
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.1.0
      with:
        dotnet-version: 8.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --no-restore

    - name: Run Tests
      run: dotnet test --no-build --logger "trx;LogFileName=test-results.trx"

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Test-Results
        path: '**/test-results.trx'

    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        username: 'cabxavier'
        password: ${{ secrets.DOCKERHUB_FIAP_TECHCHALLANGE_PASSWORD }}

    - name: Check docker compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Build and start Docker Compose
      run: |
        docker-compose up --build -d
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v6.9.0
      with:       
        context: .
        tags: 'cabxavier/fiap-techchallange-api:latest'
        push: true

  deploy_to_kubernetes:
    name: Deploy to Kubernetes
    needs: test_jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
          # Verificar e corrigir endpoint do Kubernetes
          if grep -q "kubernetes.docker.internal" ~/.kube/config; then
            echo "Corrigindo endpoint do Kubernetes no kubeconfig..."
            sed -i 's/kubernetes.docker.internal/kubernetes.default.svc.cluster.local/g' ~/.kube/config
          fi
          
          # Verificar conexão com o cluster
          echo "Verificando conexão com o cluster..."
          kubectl cluster-info --request-timeout=30s || echo "Aviso: Falha ao conectar ao cluster, continuando..."

      - name: Deploy Kubernetes manifests
        run: |
          set +e  # Não sair imediatamente em caso de erro
          
          # Tentar criar namespace (ignorar erros)
          kubectl create namespace tech-challenge --dry-run=client -o yaml | kubectl apply -f - --validate=false --request-timeout=30s || true
          
          # Lista de manifestos para aplicar
          manifests=(
            namespace.yaml
            rabbitmq-deployment.yaml
            azurite-deployment.yaml
            prometheus-deployment.yaml
            grafana-deployment.yaml
            techchallengeapi-deployment.yaml
            azurefunction-deployment.yaml
            ocelotgatewayapi-deployment.yaml
          )
          
          # Aplicar cada manifesto com tentativas
          for manifest in "${manifests[@]}"; do
            echo "Aplicando $manifest..."
            for i in {1..3}; do
              if kubectl apply -f $manifest --validate=false --request-timeout=60s; then
                echo "$manifest aplicado com sucesso"
                break
              else
                echo "Tentativa $i falhou para $manifest"
                sleep 5
              fi
            done
          done

      - name: Verify deployments
        run: |
          echo "### Verificando estado do cluster ###"
          kubectl config view --minify
          kubectl config current-context
          
          echo "### Recursos no namespace tech-challenge ###"
          kubectl get all -n tech-challenge || echo "Falha ao verificar recursos"
          
          echo "### Descrição dos pods com problemas ###"
          kubectl describe pods -n tech-challenge --field-selector=status.phase!=Running || true