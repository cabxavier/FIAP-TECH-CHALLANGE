# Definindo o nome do workflow
name: Test and Deploy Workflow

# Definindo quando o workflow será disparado
on:
  push:
    branches: [ main ]

# Definindo os jobs que o workflow executará
jobs:
  test_jobs:
    name: Executando job de teste
    runs-on: ubuntu-latest
    steps:
    - name: Step 1
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v4.1.0
      with:
        dotnet-version: 8.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --no-restore

    - name: Run Tests
      run: dotnet test --no-build --logger "trx;LogFileName=test-results.trx"

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Test-Results
        path: '**/test-results.trx'

    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        username: 'cabxavier'
        password: ${{ secrets.DOCKERHUB_FIAP_TECHCHALLANGE_PASSWORD }}

    - name: Check docker compose
      run: |
        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Build and start Docker Compose
      run: |
        docker-compose up --build -d
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v6.9.0
      with:       
        context: .
        tags: 'cabxavier/fiap-techchallange:latest'
        push: true

  deploy_to_kubernetes:
    name: Deploy to Kubernetes
    needs: test_jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
          # Adicionar fallback para docker.internal
          echo "127.0.0.1 kubernetes.docker.internal" | sudo tee -a /etc/hosts
          
          # Verificar conexão com o cluster
          kubectl cluster-info || echo "Cluster info check failed, continuing..."

      - name: Deploy Kubernetes manifests
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          
          # Create namespace if not exists
          kubectl create namespace tech-challenge --dry-run=client -o yaml | kubectl apply -f - --validate=false
          
          # Apply all manifests with validation disabled and timeout
          for manifest in \
            namespace.yaml \
            rabbitmq-deployment.yaml \
            azurite-deployment.yaml \
            prometheus-deployment.yaml \
            grafana-deployment.yaml \
            techchallengeapi-deployment.yaml \
            azurefunction-deployment.yaml \
            ocelotgatewayapi-deployment.yaml
          do
            echo "Applying $manifest..."
            if ! kubectl apply -f $manifest --validate=false --request-timeout=60s; then
              echo "Warning: Failed to apply $manifest"
              # Tentar novamente uma vez
              sleep 5
              kubectl apply -f $manifest --validate=false --request-timeout=60s || true
            fi
          done

      - name: Verify deployments
        run: |
          echo "### Deployments ###"
          kubectl get deployments -n tech-challenge --show-labels
          
          echo "### Pods ###"
          kubectl get pods -n tech-challenge -o wide
          
          echo "### Services ###"
          kubectl get services -n tech-challenge
          
          echo "### Verificação detalhada ###"
          kubectl get all -n tech-challenge