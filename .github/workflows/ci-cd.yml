name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --logger "trx;LogFileName=test-results.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/test-results.trx'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: 'cabxavier'
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: cabxavier/fiap-techchallange:latest

  deploy:
    name: Deploy to Kubernetes
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Kubernetes manifests
        run: |
          if [ ! -d "k8s" ]; then
            echo "::error::Directory 'k8s' not found"
            echo "Please create a 'k8s' directory with your manifests"
            exit 1
          fi
          
          if [ ! -f "k8s/namespace.yaml" ]; then
            echo "::error::namespace.yaml not found in k8s directory"
            exit 1
          fi
          
          echo "Found the following manifests:"
          ls -la k8s/

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install

      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Apply manifests
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/ --recursive
          
          echo "Current cluster state:"
          kubectl get all -n tech-challenge

      - name: Verify deployment
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n tech-challenge
          
          echo "Final status:"
          kubectl get pods -n tech-challenge
          kubectl get svc -n tech-challenge